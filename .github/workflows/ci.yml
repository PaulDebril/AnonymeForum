name: CI/CD Pipeline

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  services:
    name: ${{ matrix.service }} - service
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [api, thread, sender]

    defaults:
      run:
        working-directory: ${{ matrix.service }}

    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: |
          SHORT_HASH=$(git rev-parse --short HEAD)
          echo "tag=$SHORT_HASH" >> $GITHUB_OUTPUT
          echo "Tag will be: $SHORT_HASH"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests (si présents)
        run: |
          if [ -f package.json ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "Aucun test défini"
          fi

      - name: Check Prettier formatting (si applicable)
        run: |
          if npm run | grep -q 'format'; then
            npm run format -- --check
          else
            echo "Aucune commande format trouvée"
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker image
        run: |
          SHORT_HASH=${{ steps.set-tag.outputs.tag }}
          REPO_OWNER=$(echo "${{ env.OWNER }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ${{ env.REGISTRY }}/$REPO_OWNER/${{ matrix.service }}:$SHORT_HASH .

      - name: Push Docker image
        run: |
          SHORT_HASH=${{ steps.set-tag.outputs.tag }}
          REPO_OWNER=$(echo "${{ env.OWNER }}" | tr '[:upper:]' '[:lower:]')
          docker push ${{ env.REGISTRY }}/$REPO_OWNER/${{ matrix.service }}:$SHORT_HASH

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: services
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test') && github.event_name == 'push'
    
    defaults:
      run:
        working-directory: terraform

    outputs:
      api-ip: ${{ steps.terraform-outputs.outputs.api-ip }}
      sender-ip: ${{ steps.terraform-outputs.outputs.sender-ip }}
      thread-ip: ${{ steps.terraform-outputs.outputs.thread-ip }}
      db-ip: ${{ steps.terraform-outputs.outputs.db-ip }}
      db-private-ip: ${{ steps.terraform-outputs.outputs.db-private-ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false

      - name: Setup Terraform Cloud CLI
        run: |
          echo "credentials \"app.terraform.io\" {" > ~/.terraformrc
          echo "  token = \"${{ secrets.TF_API_TOKEN }}\"" >> ~/.terraformrc
          echo "}" >> ~/.terraformrc

      - name: Update Terraform variables in Terraform Cloud
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          # Ces variables seront définies dans Terraform Cloud UI ou via API
          echo "Variables à définir dans Terraform Cloud:"
          echo "github_token = ${{ secrets.GHCR_PAT }}"
          echo "docker_tag = ${{ needs.services.outputs.image-tag }}"
          echo "environment = $BRANCH_NAME"

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var="github_token=${{ secrets.GHCR_PAT }}" -var="docker_tag=${{ needs.services.outputs.image-tag }}" -var="environment=$(echo ${GITHUB_REF#refs/heads/})"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="github_token=${{ secrets.GHCR_PAT }}" -var="docker_tag=${{ needs.services.outputs.image-tag }}" -var="environment=$(echo ${GITHUB_REF#refs/heads/})"

      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          echo "api-ip=$(terraform output -raw api_instance_public_ip)" >> $GITHUB_OUTPUT
          echo "sender-ip=$(terraform output -raw sender_instance_public_ip)" >> $GITHUB_OUTPUT
          echo "thread-ip=$(terraform output -raw thread_instance_public_ip)" >> $GITHUB_OUTPUT
          echo "db-ip=$(terraform output -raw db_instance_public_ip)" >> $GITHUB_OUTPUT
          echo "db-private-ip=$(terraform output -raw db_instance_private_ip)" >> $GITHUB_OUTPUT